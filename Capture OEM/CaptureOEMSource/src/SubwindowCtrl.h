#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CSubwindowCtrl wrapper class

class CSubwindowCtrl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CSubwindowCtrl)
public:
	CSubwindowCtrl() : m_pLeftEdit(NULL), m_pTopEdit(NULL), m_pWidthEdit(NULL), m_pHeightEdit(NULL) {}
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x3964AE07, 0xDDDC, 0x470C, { 0x8B, 0x43, 0x2A, 0xB1, 0x5D, 0xB6, 0x62, 0x7A } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
	static const int WND_TOP, WND_LEFT, WND_WIDTH, WND_HEIGHT;

// Operations
public:

// IPxLSubwindow

// Functions
//

	void put_BackColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_BackColor()
	{
		unsigned long result;
		InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_BorderColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_BORDERCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_BorderColor()
	{
		unsigned long result;
		InvokeHelper(DISPID_BORDERCOLOR, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_FillColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_FILLCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_FillColor()
	{
		unsigned long result;
		InvokeHelper(DISPID_FILLCOLOR, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_ForeColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_FORECOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_ForeColor()
	{
		unsigned long result;
		InvokeHelper(DISPID_FORECOLOR, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_Enabled(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_Enabled()
	{
		BOOL result;
		InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void SetBounds(long width, long height)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, width, height);
	}
	void SetSubwindow(long left, long top, long width, long height)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, left, top, width, height);
	}
	void GetBounds(long * width, long * height)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, width, height);
	}
	void GetSubwindow(long * left, long * top, long * width, long * height)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, left, top, width, height);
	}
	void SetSize(long width, long height)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, width, height);
	}
	long get_MinWidth()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MinWidth(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MinHeight()
	{
		long result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MinHeight(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void SetLeft(long left)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, left);
	}
	void SetTop(long top)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, top);
	}
	void SetBottom(long bottom)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xA, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bottom);
	}
	void SetRight(long right)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xB, DISPATCH_METHOD, VT_EMPTY, NULL, parms, right);
	}
	void SetWidth(long width)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xC, DISPATCH_METHOD, VT_EMPTY, NULL, parms, width);
	}
	void SetHeight(long height)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xD, DISPATCH_METHOD, VT_EMPTY, NULL, parms, height);
	}
	void put_AmbientColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_AmbientColor()
	{
		unsigned long result;
		InvokeHelper(0x0E, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}

// Properties
//



	DECLARE_EVENTSINK_MAP()
	void SubwindowChanging(long left, long top, unsigned long width, unsigned long height);

public:
	CWnd* m_pLeftEdit;
	CWnd* m_pTopEdit;
	CWnd* m_pWidthEdit;
	CWnd* m_pHeightEdit;
	void SetEdits(CWnd* pLeftEdit, CWnd* pTopEdit, CWnd* pWidthEdit, CWnd* pHeightEdit);
	void UpdateFromEdits(int which = WND_TOP | WND_LEFT | WND_WIDTH | WND_HEIGHT);
	void UpdateEdits(long left, long top, unsigned long width, unsigned long height);
	void UpdateEdits(void);
	DECLARE_MESSAGE_MAP()
	afx_msg BOOL OnHelpInfo(HELPINFO* pHelpInfo);
};

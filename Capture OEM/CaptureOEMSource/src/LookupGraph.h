#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

// Re. the above: Yeah, as if! Not only has VC++7.1 *never* regenerated this 
// class on me - I have found that it's like pulling teeth trying to get it
// to regenerate it when I *want* it to! I ended up writing much of this by hand
// because I could not get VC++ to regenerate it properly after I had modified
// the wrapped control.

/////////////////////////////////////////////////////////////////////////////
// CLookupGraph wrapper class

class CLookupGraph : public CWnd
{
protected:
	DECLARE_DYNCREATE(CLookupGraph)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x7555A9BA, 0x88F, 0x490D, { 0xB3, 0x55, 0xA9, 0x8, 0x21, 0xE3, 0x31, 0x71 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

	void put_BackColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_BackColor()
	{
		unsigned long result;
		InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_BorderColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_BORDERCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_BorderColor()
	{
		unsigned long result;
		InvokeHelper(DISPID_BORDERCOLOR, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_BorderWidth(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_BORDERWIDTH, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_BorderWidth()
	{
		unsigned long result;
		InvokeHelper(DISPID_BORDERWIDTH, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_FillColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_FILLCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_ForeColor()
	{
		unsigned long result;
		InvokeHelper(DISPID_FORECOLOR, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_DrawWidth(unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_DRAWWIDTH, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_DrawWidth()
	{
		unsigned long result;
		InvokeHelper(DISPID_DRAWWIDTH, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_Enabled(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_Enabled()
	{
		BOOL result;
		InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void FillTable(long length, long * table)
	{
		if (m_pCtrlSite == NULL) return;
		static BYTE parms[] = VTS_I4 VTS_PI4 ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, length, table);
	}
	void SetFromTable(long length, long * table)
	{
		if (m_pCtrlSite == NULL) return;
		static BYTE parms[] = VTS_I4 VTS_PI4 ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, length, table);
	}
	long GetPointCount()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}

// VTS_UI1 and VTS_PUI1 are defined incorrectly in the version of Afxdisp.h
// that ships with VC 6.0 (fixed in VC 7+).
// See: http://support.microsoft.com/?id=242588
#define MY_VTS_UI1 "\x11"
#define MY_VTS_PUI1 "\x51"

	void GetPoints(long * points, unsigned char * lineTypes, long nPoints)
	{
		static BYTE parms[] = VTS_PI4 MY_VTS_PUI1 VTS_I4 ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, points, lineTypes, nPoints);
	}
	void SetPoints(long * points, unsigned char * lineTypes, long nPoints)
	{
		static BYTE parms[] = VTS_PI4 MY_VTS_PUI1 VTS_I4 ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, points, lineTypes, nPoints);
	}
	void Reset(void)
	{
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, VTS_NONE, NULL);
	}


	DECLARE_MESSAGE_MAP()
	afx_msg BOOL OnHelpInfo(HELPINFO* pHelpInfo);
};
